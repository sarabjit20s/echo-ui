import path from 'path';
import fs from 'fs';

import { registry } from '../registry';
import {
  Registry,
  RegistryItem,
  RegistryItemWithCode,
  RegistryWithCode,
} from '../schema';

function main() {
  const registryWithCode = createRegistryWithCode(registry);

  const content = `
  // auto-generated file by this script - scripts/build-registry-with-code.ts
  // do not edit this file manually

  import { RegistryWithCode } from './schema';

  export const registryWithCode: RegistryWithCode = ${JSON.stringify(
    registryWithCode,
    null,
    2,
  )};
  `;

  // create registry-with-code.ts file
  fs.writeFileSync(
    path.join(process.cwd(), 'src', 'registry-with-code.ts'),
    content,
    'utf8',
  );
}

main();

function createRegistryWithCode(registry: Registry) {
  const registryWithCode: RegistryWithCode = [];

  for (const item of registry) {
    const newItem: RegistryItemWithCode = {
      ...(item as any),
      code: getItemCode(item),
    };

    // if (item.registryDependencies?.length) {
    //   const registry = createRegistryWithCode(item.registryDependencies ?? []);

    //   newItem.registryDependencies = registry;
    // }

    registryWithCode.push(newItem);
  }

  return registryWithCode;
}

function getItemCode(item: RegistryItem) {
  let code: string;

  const basePath = path.join(
    process.cwd(),
    'node_modules',
    '@saaj-ui/react-native/src',
  );

  switch (item.type) {
    case 'component':
      code = fs.readFileSync(
        path.join(basePath, 'components', item.name),
        'utf8',
      );
      break;
    case 'hook':
      code = fs.readFileSync(path.join(basePath, 'hooks', item.name), 'utf8');
      break;
    case 'type':
      code = fs.readFileSync(path.join(basePath, 'types', item.name), 'utf8');
      break;
    case 'utility':
      code = fs.readFileSync(path.join(basePath, 'utils', item.name), 'utf8');
      break;
    case 'style':
      code = fs.readFileSync(path.join(basePath, 'styles', item.name), 'utf8');
      break;
    default:
      code = '';
      break;
  }
  return code;
}
